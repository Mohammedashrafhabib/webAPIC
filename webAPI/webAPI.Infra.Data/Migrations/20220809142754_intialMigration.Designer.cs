// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using webAPI.Infra.Data.Context;

#nullable disable

namespace webAPI.Infra.Data.Migrations
{
    [DbContext(typeof(BuildingsDBContext))]
    [Migration("20220809142754_intialMigration")]
    partial class intialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("webAPI.Domain.Models.Building", b =>
                {
                    b.Property<int>("BuildingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingID"), 1L, 1);

                    b.Property<int>("Safe")
                        .HasColumnType("int");

                    b.HasKey("BuildingID");

                    b.ToTable("buildings");
                });

            modelBuilder.Entity("webAPI.Domain.Models.Debt", b =>
                {
                    b.Property<int>("DebtID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DebtID"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("FlatID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDue")
                        .HasColumnType("bit");

                    b.HasKey("DebtID");

                    b.HasIndex("FlatID");

                    b.ToTable("debts");
                });

            modelBuilder.Entity("webAPI.Domain.Models.Flat", b =>
                {
                    b.Property<int>("FlatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlatID"), 1L, 1);

                    b.Property<int>("BuildingID")
                        .HasColumnType("int");

                    b.Property<int>("Safe")
                        .HasColumnType("int");

                    b.HasKey("FlatID");

                    b.HasIndex("BuildingID");

                    b.ToTable("flats");
                });

            modelBuilder.Entity("webAPI.Domain.Models.Transaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BuildingID")
                        .HasColumnType("int");

                    b.Property<int>("DebtID")
                        .HasColumnType("int");

                    b.Property<bool>("Dept_or_Payment")
                        .HasColumnType("bit");

                    b.Property<int>("FlatID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BuildingID");

                    b.HasIndex("DebtID");

                    b.HasIndex("FlatID");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("webAPI.Domain.Models.Debt", b =>
                {
                    b.HasOne("webAPI.Domain.Models.Flat", "flat")
                        .WithMany()
                        .HasForeignKey("FlatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("flat");
                });

            modelBuilder.Entity("webAPI.Domain.Models.Flat", b =>
                {
                    b.HasOne("webAPI.Domain.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");
                });

            modelBuilder.Entity("webAPI.Domain.Models.Transaction", b =>
                {
                    b.HasOne("webAPI.Domain.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webAPI.Domain.Models.Debt", "Debt")
                        .WithMany()
                        .HasForeignKey("DebtID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("webAPI.Domain.Models.Flat", "flat")
                        .WithMany()
                        .HasForeignKey("FlatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Debt");

                    b.Navigation("flat");
                });
#pragma warning restore 612, 618
        }
    }
}
